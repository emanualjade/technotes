# RESOURCES
http://postgresguide.com/
http://postgresweekly.com/
http://www.postgresql.org/


# RUN TO SETUP BUFFER EDITOR
export EDITOR="subl -w"

# DATA TYPES
Numerical - INTEGER, FLOAT, NUMERIC, REAL, SERIAL
Character - CHAR, VARCHAR, TEXT
Logical - BOOLEAN
Temporal - DATE, TIME, TIMESTAMP, INTERVAL, TIMESTAMPTZ

Binary - BYTEA, BIT, BIT VARYING
Geo-Spatial - POINT, PATH, POLYGON, CIRCLE, LINE
Internet - INET, CIDR, MACADDR

Special - ENUM, RANGE, JSON, XML, OID
Array - []
Composite Type - TYPE

# PSQL COMMANDS
(options: S = show system objects, + = additional detail)
  \d[S+]                 list tables, views, and sequences
  \d[S+]  NAME           describe table, view, sequence, or index
  \da[S]  [PATTERN]      list aggregates
  \db[+]  [PATTERN]      list tablespaces
  \dc[S+] [PATTERN]      list conversions
  \dC[+]  [PATTERN]      list casts
  \dd[S]  [PATTERN]      show object descriptions not displayed elsewhere
  \ddp    [PATTERN]      list default privileges
  \dD[S+] [PATTERN]      list domains
  \det[+] [PATTERN]      list foreign tables
  \des[+] [PATTERN]      list foreign servers
  \deu[+] [PATTERN]      list user mappings
  \dew[+] [PATTERN]      list foreign-data wrappers
  \df[antw][S+] [PATRN]  list [only agg/normal/trigger/window] functions
  \dF[+]  [PATTERN]      list text search configurations
  \dFd[+] [PATTERN]      list text search dictionaries
  \dFp[+] [PATTERN]      list text search parsers
  \dFt[+] [PATTERN]      list text search templates
  \dg[+]  [PATTERN]      list roles
  \di[S+] [PATTERN]      list indexes
  \dl                    list large objects, same as \lo_list
  \dL[S+] [PATTERN]      list procedural languages
  \dm[S+] [PATTERN]      list materialized views
  \dn[S+] [PATTERN]      list schemas
  \do[S]  [PATTERN]      list operators
  \dO[S+] [PATTERN]      list collations
  \dp     [PATTERN]      list table, view, and sequence access privileges
  \drds [PATRN1 [PATRN2]] list per-database role settings
  \ds[S+] [PATTERN]      list sequences
  \dt[S+] [PATTERN]      list tables
  \dT[S+] [PATTERN]      list data types
  \du[+]  [PATTERN]      list roles
  \dv[S+] [PATTERN]      list views
  \dE[S+] [PATTERN]      list foreign tables
  \dx[+]  [PATTERN]      list extensions
  \dy     [PATTERN]      list event triggers
  \l[+]   [PATTERN]      list databases
  \sf[+] FUNCNAME        show a function's definition
  \z      [PATTERN]      same as \dp

 Formatting
  \a                     toggle between unaligned and aligned output mode
  \C [STRING]            set table title, or unset if none
  \f [STRING]            show or set field separator for unaligned query output
  \H                     toggle HTML output mode (currently off)
  \pset NAME [VALUE]     set table output option
                         (NAME := {format|border|expanded|fieldsep|fieldsep_zero|footer|null|
                         numericlocale|recordsep|recordsep_zero|tuples_only|title|tableattr|pager})
  \t [on|off]            show only rows (currently off)
  \T [STRING]            set HTML <table> tag attributes, or unset if none
  \x [on|off|auto]       toggle expanded output (currently off)

Connection
  \c[onnect] [DBNAME|- USER|- HOST|- PORT|-]
                         connect to new database (currently "tuts")
  \encoding [ENCODING]   show or set client encoding
  \password [USERNAME]   securely change the password for a user
  \conninfo              display information about current connection

Operating System
  \cd [DIR]              change the current working directory
  \setenv NAME [VALUE]   set or unset environment variable
  \timing [on|off]       toggle timing of commands (currently off)
  \! [COMMAND]           execute command in shell or start interactive shell

Variables
  \prompt [TEXT] NAME    prompt user to set internal variable
  \set [NAME [VALUE]]    set internal variable, or list all if no parameters
  \unset NAME            unset (delete) internal variable

Large Objects
  \lo_export LOBOID FILE
  \lo_import FILE [COMMENT]
  \lo_list
  \lo_unlink LOBOID      large object operations

# SQL COMMANDS
ABORT                            CLUSTER                          DEALLOCATE                       END
  ALTER AGGREGATE                  COMMENT                          DECLARE                          EXECUTE
  ALTER COLLATION                  COMMIT                           DELETE                           EXPLAIN
  ALTER CONVERSION                 COMMIT PREPARED                  DISCARD                          FETCH
  ALTER DATABASE                   COPY                             DO                               GRANT
  ALTER DEFAULT PRIVILEGES         CREATE AGGREGATE                 DROP AGGREGATE                   INSERT
  ALTER DOMAIN                     CREATE CAST                      DROP CAST                        LISTEN
  ALTER EVENT TRIGGER              CREATE COLLATION                 DROP COLLATION                   LOAD
  ALTER EXTENSION                  CREATE CONVERSION                DROP CONVERSION                  LOCK
  ALTER FOREIGN DATA WRAPPER       CREATE DATABASE                  DROP DATABASE                    MOVE
  ALTER FOREIGN TABLE              CREATE DOMAIN                    DROP DOMAIN                      NOTIFY
  ALTER FUNCTION                   CREATE EVENT TRIGGER             DROP EVENT TRIGGER               PREPARE
  ALTER GROUP                      CREATE EXTENSION                 DROP EXTENSION                   PREPARE TRANSACTION
  ALTER INDEX                      CREATE FOREIGN DATA WRAPPER      DROP FOREIGN DATA WRAPPER        REASSIGN OWNED
  ALTER LANGUAGE                   CREATE FOREIGN TABLE             DROP FOREIGN TABLE               REFRESH MATERIALIZED VIEW
  ALTER LARGE OBJECT               CREATE FUNCTION                  DROP FUNCTION                    REINDEX
  ALTER MATERIALIZED VIEW          CREATE GROUP                     DROP GROUP                       RELEASE SAVEPOINT
  ALTER OPERATOR                   CREATE INDEX                     DROP INDEX                       RESET
  ALTER OPERATOR CLASS             CREATE LANGUAGE                  DROP LANGUAGE                    REVOKE
  ALTER OPERATOR FAMILY            CREATE MATERIALIZED VIEW         DROP MATERIALIZED VIEW           ROLLBACK
  ALTER ROLE                       CREATE OPERATOR                  DROP OPERATOR                    ROLLBACK PREPARED
  ALTER RULE                       CREATE OPERATOR CLASS            DROP OPERATOR CLASS              ROLLBACK TO SAVEPOINT
  ALTER SCHEMA                     CREATE OPERATOR FAMILY           DROP OPERATOR FAMILY             SAVEPOINT
  ALTER SEQUENCE                   CREATE ROLE                      DROP OWNED                       SECURITY LABEL
  ALTER SERVER                     CREATE RULE                      DROP ROLE                        SELECT
  ALTER TABLE                      CREATE SCHEMA                    DROP RULE                        SELECT INTO
  ALTER TABLESPACE                 CREATE SEQUENCE                  DROP SCHEMA                      SET
  ALTER TEXT SEARCH CONFIGURATION  CREATE SERVER                    DROP SEQUENCE                    SET CONSTRAINTS
  ALTER TEXT SEARCH DICTIONARY     CREATE TABLE                     DROP SERVER                      SET ROLE
  ALTER TEXT SEARCH PARSER         CREATE TABLE AS                  DROP TABLE                       SET SESSION AUTHORIZATION
  ALTER TEXT SEARCH TEMPLATE       CREATE TABLESPACE                DROP TABLESPACE                  SET TRANSACTION
  ALTER TRIGGER                    CREATE TEXT SEARCH CONFIGURATION DROP TEXT SEARCH CONFIGURATION   SHOW
  ALTER TYPE                       CREATE TEXT SEARCH DICTIONARY    DROP TEXT SEARCH DICTIONARY      START TRANSACTION
  ALTER USER                       CREATE TEXT SEARCH PARSER        DROP TEXT SEARCH PARSER          TABLE
  ALTER USER MAPPING               CREATE TEXT SEARCH TEMPLATE      DROP TEXT SEARCH TEMPLATE        TRUNCATE
  ALTER VIEW                       CREATE TRIGGER                   DROP TRIGGER                     UNLISTEN
  ANALYZE                          CREATE TYPE                      DROP TYPE                        UPDATE
  BEGIN                            CREATE USER                      DROP USER                        VACUUM
  CHECKPOINT                       CREATE USER MAPPING              DROP USER MAPPING                VALUES
  CLOSE                            CREATE VIEW                      DROP VIEW                        WITH


# EXAMPLE - create simple relation with tutorials and authors

createdb tuts

psql tuts

create table authors ( name varchar(100) );

alter table authors add column author_id serial primary key;

create table tutorials(
  tutorial_id serial primary key,
  title text,
  author_id integer references authors(author_id)
)

insert into tutorials(title, author_id) values('my first tutorial', 1);

select tutorials.title, authors.name from tutorials join authors on tutorials.author_id = authors.author_id;

drop table authors, tutorials;

# EXAMPLE - Lifecycle of a table

create table authors();

alter table authors add column author_id serial primary key, add column name varchar(100);

insert into authors(name) values ('net'), ('tuts'), ('web');

alter table authors add column email varchar(100) not null default 'invalid@email.com';

update authors set email='net@tuts.com' where name = 'net';

delete from authors where name='web';

create table tutorials();

alter table tutorials
add column tutorial_id serial primary key,
add column title text,
add column author_id integer,
add constraint unique_title unique(title),
add foreign key(author_id) references authors(author_id);

insert into tutorials(title, author_id) values('my first article', null);

update tutorials set author_id=1 where tutorial_id=1;

# EXAMPLE - create a schema - delete a schema

create schema temp;

create table temp.test();

set search_path=public,temp;

drop schema temp cascade;

set search_path=public;

show search_path;


# EXAMPLE 

create type publish_state as enum('initial', 'approved', 'authored', 'edited', 'reviewed', 'scheduled', 'published');

\dT --- to see the new datatype you just created above
\dT+ --- to see the new datatype you just created above with more detail

create table books(
  book_id serial primary key,
  price_usd numeric(4,2),
  isbn varchar(20),
  title text,
  author_id integer references authors(author_id),
  tags varchar(30)[],
  publish_date date,
  last_updated timestamp,
  published boolean,
  state publish_state
);

insert into books(price_usd) values (23.99);

insert into books(title, tags) values ('Postgres Essentials', '{"sql", "video"}');

select book_id, tags from books;

update books set tags='{"a", "b", "c"}' where book_id=2;

update books set tags[2]='changedMe' where book_id=2;

update books set publish_date='2013-Jan-21' where book_id=2;

select publish_date from books;

select last_updated, publish_date from books;

update books set last_updated='Apr 20 2013';
update books set last_updated='Apr 20 2013 10:00AM';
update books set last_updated='today';

update books set published='true';
update books set published='t';
update books set published='1';
update books set published='yes';
update books set published='y';

update books set published='false';
update books set published='f';
update books set published='0';
update books set published='no';
update books set published='n';
select published from books;

update books set state='approved';

# EXAMPLE - JSON
create table temp( col_json json );

insert into temp(col_json) values ('{}');

insert into temp(col_json) values ('{"firstname": "Pavan", "lastname": "Podila"}');

select * from temp;

# EXAMPLE 
select row_to_json(row(title, tags)) from books;
select array_to_json(tags) from books;

# EXAMPLE 
alter table temp add column col_xml xml;
insert into temp(col_xml) values ('<hello>world</hello>');
select col_xml from temp;
update temp set col_xml='<hello><world>tuts</world></hello>';
select xpath('//world', col_xml) from temp;
select xpath('//world/text()', col_xml) from temp;

# EXAMPLE
select xmlelement(
  name "Book",
  xmlattributes(authors.name as "Author")
)
from books join authors
on books.author_id = authors.author_id;

# EXAMPLE
select int4range(1,20);
select numrange(1,20);
select numrange(1,20) && numrange(10,30); // does it overlap - will return true
select numrange(1,20) * numrange(10,30); // shows the overlap between the ranges
select numrange(1,20) + numrange(10,30); // merges the ranges into a single range
select numrange(1,20) - numrange(10,30); // removes the overlapping range


# EXAMPLE
update books set price_usd=100*random();
select title, price_usd from books;
select title, price_usd from books where '[1,49]'::numrange @> price_usd;


# EXAMPLE
create type address as (
  street text,
  state char(2),
  country varchar(50),
  postal_code varchar(10)
);

\dT;

alter table temp add column address address;

insert into temp(address) values ('("some street","NY","USA","10022")');

select address from temp;

insert into temp(address) values (row('some other street', 'NJ', 'USA', '08817'));

update temp set address.country='Country on Mars';

select (temp.address).street from temp;

drop type address cascade;

# EXAMPLE
delete from books;
delete from tutorials;
delete from authors;
alter sequence authors_author_id_seq restart with 1;

copy authors(name, email) from '/Users/emanualjade/Desktop/authors.csv' delimiter '|' csv header;

copy books(title, price_usd, tags, publish_date, author_id) from '/Users/emanualjade/Desktop/books.csv' delimiter '|' csv header;

copy tutorials(title, author_id) from '/Users/emanualjade/Desktop/tutorials.csv' delimiter '|' csv header;

select * from authors;
select * from books;
select * from tutorials;

SELECT * FROM authors
JOIN books ON authors.author_id=books.author_id
ORDER BY authors.name;

SELECT authors.name, books.title FROM authors
JOIN books ON authors.author_id=books.author_id
ORDER BY authors.name;

SELECT a.name, count(t.tutorial_id) AS count
FROM authors a JOIN tutorials t
ON a.author_id=t.author_id
GROUP BY a.name
ORDER BY count desc
LIMIT 3;

SELECT 22.0/7 AS life_of_pi;

SELECT * FROM (VALUES (1,2,3),(4,5,6),(7,8,9)) AS numbers(a,b,c);

SELECT a.author_id, a.name
FROM authors a JOIN books b ON a.author_id=b.author_id;

SELECT DISTINCT a.author_id, a.name
FROM authors a JOIN tutorials t ON a.author_id=t.author_id
ORDER BY a.author_id;

# EXAMPLE - Find book authors who are also tutorial authors

SELECT b.author_id, t.name
FROM books b JOIN
(SELECT DISTINCT a.author_id, a.name
FROM authors a JOIN tutorials t ON a.author_id=t.author_id) AS t
ON b.author_id=t.author_id

# EXAMPLE - create temporary table - alive for the lifetime of the session window
CREATE TEMPORARY TABLE tutorial_authors AS
SELECT DISTINCT a.author_id, a.name AS author_name
FROM authors a JOIN tutorials t ON a.author_id=t.author_id;

SELECT t.author_id, t.author_name FROM tutorial_authors t
JOIN books ON books.author_id=t.author_id;

# EXAMPLE - CTE - deleted as soon as it's used once
WITH tutorial_authors AS (
SELECT DISTINCT a.author_id, a.name AS author_name
FROM AUTHORS a JOIN tutorials t ON a.author_id=t.author_id
)

SELECT t.author_id, t.author_name FROM tutorial_authors t
JOIN books ON books.author_id=t.author_id;


# EXAMPLE - table function

CREATE OR REPLACE FUNCTION tutorial_authors(INT) RETURNS TABLE(author_id INT, author_name TEXT)
AS $$
SELECT DISTINCT a.author_id, a.name FROM authors a JOIN tutorials t ON a.author_id=t.author_id
LIMIT $1
$$ LANGUAGE SQL;

SELECT * FROM tutorial_authors(2);

DROP FUNCTION tutorial_authors(INT);


# EXAMPLE - creating a view

CREATE OR REPLACE VIEW tutorial_authors(author_id, author_name)
AS
SELECT DISTINCT a.author_id, a.name FROM authors a JOIN tutorials t
ON a.author_id=t.author_id;

SELECT * FROM tutorial_authors;

DROP VIEW tutorial_authors;

# EXAMPLE - hstore
CREATE EXTENSION hstore;

ALTER TABLE books
ADD COLUMN sales hstore;

UPDATE books SET sales='total_sales=>12134, peak_sales=>444, peak_sale_date=>"2012-12-25"' WHERE book_id=4;

SELECT sales FROM books WHERE book_id=4;

SELECT sales->'peak_sales' FROM books WHERE book_id=4;

SELECT DATE(sales->'peak_sale_date') FROM books WHERE book_id=4;

SELECT DATE(sales->'peak_sale_date')+365 FROM books WHERE book_id=4;




















